# -*- coding: utf-8 -*-
"""krawedzie

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mfXSdwzzdkAkQQX-E5Fvwwx1lKMkNpG6
"""

import numpy as np
class mac_wag:
  def __init__(self):
    self.macierz = None
  
  def stosami(self,start):
    odwiedzony = []
    res = self.macierz[start-1,:]
    n = 0
    for i in res:
      if i != 0:
        break
    index = (start-1,i)
    odwiedzony.append(index)
    print(odwiedzony)
      
    
    
    
    
    
  def dodaj_wierzcholek(self,ilosc):
    for x in range(ilosc):
      if self.macierz is not None:
        n = np.size(self.macierz,0)
      else: n = 0
      b = np.zeros((n+1,n+1))
      b[:n,:n] = self.macierz
      self.macierz = b
    return self.macierz
  
  def usun_wierzcholek(self,wierzcholek):
    self.macierz[:,wierzcholek-1] = 0
    self.macierz[wierzcholek -1,:] = 0
    return self.macierz 
  
  def dodaj_krawedz(self,A,B,wartosc):
    self.macierz[A-1][B-1] = wartosc
  
  def usun_krawedz(self,A,B):
    self.macierz[A-1][B-1] = 0
  
  def poka(self):
    print(self.macierz)
    print() 
    return
k = mac_wag()
k.dodaj_wierzcholek(4)
k.dodaj_krawedz(1,2,3)
k.dodaj_krawedz(3,1,10)
k.dodaj_krawedz(1,3,8)
k.dodaj_krawedz(2,3,6)
k.dodaj_krawedz(2,1,5)
k.dodaj_krawedz(2,4,3)
k.dodaj_krawedz(4,3,2)
k.dodaj_krawedz(3,4,6)
k.poka()
k.stosami(2)



n = 0
class krawedzie:

    
  def __init__(self):
    self.krawedzie = {}
    self.wierzcholki = []
    return
  def dodaj_wierzcholek(self,wierzcholek):
    self.wierzcholki.append(wierzcholek)
  
  def poka_wierzcholki(self):
    print(self.wierzcholki)
    print('--------')
  
  def poka(self):
    for key,value in self.krawedzie.items():
      print(key,value)
    print('--------')
    return
  
  def dodaj_krawedz(self,X,Y,wartosc):
    if X in self.wierzcholki and Y in self.wierzcholki:
      global n
      alfabet = ['A','B','C','D','E','F','G','H']
      self.krawedzie[alfabet[n]] = [X,Y,wartosc]
      n += 1
    else: print("błąd,zły wierzchołek")
    
  def usun_krawedz(self,krawedz):
    del self.krawedzie[krawedz]
  
  def usun_wierzcholek(self,wierzcholek):
    klucze = []
    for key,value in self.krawedzie.items():
      for i in value[0:2]:
        if i == wierzcholek:
          klucze.append(key)
    for i in klucze:
      del self.krawedzie[i]
        
    
    
    

        
k = krawedzie()
for i in range(1,5):
  k.dodaj_wierzcholek(i) 
k.dodaj_krawedz(1,2,5)
k.dodaj_krawedz(1,3,6)
k.dodaj_krawedz(1,4,4)
k.dodaj_krawedz(2,3,6)
k.dodaj_krawedz(3,1,2)
k.poka()
k.usun_krawedz('C')
k.poka()
k.usun_wierzcholek(2)
k.poka()

class sasiedzi:
  def __init__(self):
    self.sasiedzi = []
    self.wierzcholki = []
    return
  
  def pokaz(self):
    print(self.sasiedzi)
  
  def poka_wierzch(self):
    print(self.wierzcholki)
    
  def poka(self):
    for i in self.sasiedzi:
      if i is 1 and type(i) is int:
        print(i, '--->',end = ' ')
      elif i is not 1 and type(i) is int:
        print()
        print(i, '--->',end = ' ')
      else: print(i, end = ' ')
    print()
    print('-------')
    
  def dodaj_wierzcholek(self,wierzcholek):
    self.wierzcholki.append(wierzcholek)
    self.sasiedzi.append(wierzcholek)
    
  def dodaj_krawedz_dwukierunkowa(self,A,B,wartosc):
    if A > B:
      A,B = B,A 
    if A in self.wierzcholki and B in self.wierzcholki:
      for i in self.sasiedzi:
        if i is A and type(i) is int:
          a = self.sasiedzi.index(i)
        if i is B and type(i) is int:
          b = self.sasiedzi.index(i)
      self.sasiedzi.insert(b+1,(A,wartosc))
      self.sasiedzi.insert(a+1,(B,wartosc))
    else:
      print('zły wierzchołek dla: '+ str(A) +' i ' + str(B))
  

  
  def dodaj_krawedz(self,A,B,wartosc):
    if A in self.wierzcholki and B in self.wierzcholki:
      for i in self.sasiedzi:
        if i is A and type(i) is int:
          a = self.sasiedzi.index(i)
      self.sasiedzi.insert(a+1,(B,wartosc))
    else:
      print('zły wierzchołek dla: '+ str(A) +' i ' + str(B))
  
  
  def usun_krawedz(self,A,B,wartosc):
    self.sasiedzi.remove((B,wartosc))
    self.sasiedzi.remove((A,wartosc))
  
  def usun_wierzcholek(self,wierzcholek):
    self.wierzcholki.remove(wierzcholek)
    for i in self.sasiedzi:
      if type(i) is tuple and wierzcholek in i:
        self.sasiedzi.remove(i)
      if i is wierzcholek:
        self.sasiedzi.remove(i)

    

      
      
      
      
        
      
    
    
s = sasiedzi()
for i in range(1,5):
  s.dodaj_wierzcholek(i)
s.dodaj_krawedz(2,3,5)
s.dodaj_krawedz(2,1,7)
s.dodaj_krawedz(1,3,6)
s.dodaj_krawedz(1,2,3)
s.dodaj_krawedz(3,4,1)
s.poka()
s.pokaz()